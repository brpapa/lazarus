datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PG_CONNECTION_STRING")
}

generator client {
  provider = "prisma-client-js"
}

// MODELS OF USER MODULE:

model UserModel {
  id                        String          @id @default(uuid()) @db.VarChar(36)
  username                  String          @unique @db.VarChar(32)
  email                     String          @unique @db.VarChar(256)
  password                  String          @db.VarChar(256)
  name                      String          @db.VarChar(256)
  avatarUrl                 String?          @db.VarChar(256)
  preferencesRadiusDistance Int             @map("preferences_radius_distance")
  preferencesLanguage       String          @map("preferences_language") @db.VarChar(8)
  createdAt                 DateTime        @default(now()) @map("created_at")
  incidents                 IncidentModel[]
  comments                  CommentModel[]
  reactions                 ReactionModel[]
  devices                   DeviceModel[]

  NotificationModel NotificationModel[]
  @@map("users")
}

// MODELS OF INCIDENT MODULE:

model IncidentModel {
  id                      String             @id @default(uuid()) @db.VarChar(36)
  title                   String             @db.VarChar(256)
  status                  IncidentStatusEnum
  medias                  MediaModel[]
  comments                CommentModel[]
  reactions               ReactionModel[]
  activityLogs            ActivityLogModel[]
  formattedAddress        String?            @map("formatted_address") @db.Text
  statsCommentsCount      Int                @map("stats_comments_count")
  statsReactionsCount     Int                @map("stats_reactions_count")
  statsViewsCount         Int                @map("stats_views_count")
  statsUsersNotifiedCount Int                @map("stats_users_notified_count")
  creatorUserId           String             @map("creator_user_id") @db.VarChar(36)
  creatorUser             UserModel          @relation(fields: [creatorUserId], references: [id])
  createdAt               DateTime           @default(now()) @map("created_at")
  updatedAt               DateTime?          @map("updated_at")

  @@map("incidents")
}

model MediaModel {
  id         String        @id @default(uuid()) @db.VarChar(36)
  url        String        @db.VarChar(256)
  type       MediaTypeEnum
  recordedAt DateTime
  incidentId String        @map("incident_id") @db.VarChar(36)
  incident   IncidentModel @relation(fields: [incidentId], references: [id])

  @@map("medias")
}

model CommentModel {
  id              String         @id @default(uuid()) @db.VarChar(36)
  content         String         @db.Text
  userId          String         @map("user_id") @db.VarChar(36)
  user            UserModel      @relation(fields: [userId], references: [id])
  incidentId      String         @map("incident_id") @db.VarChar(36)
  incident        IncidentModel  @relation(fields: [incidentId], references: [id])
  parentCommentId String?        @map("parent_comment_id") @db.VarChar(36)
  parentComment   CommentModel?  @relation("replies", fields: [parentCommentId], references: [id])
  createdAt       DateTime       @default(now()) @map("created_at")
  replies         CommentModel[] @relation("replies")

  @@map("comments")
}

model ReactionModel {
  id         String           @id @default(uuid()) @db.VarChar(36)
  type       ReactionTypeEnum
  userId     String           @map("user_id") @db.VarChar(36)
  user       UserModel        @relation(fields: [userId], references: [id])
  incidentId String           @map("incident_id") @db.VarChar(36)
  incident   IncidentModel    @relation(fields: [incidentId], references: [id])
  createdAt  DateTime         @default(now()) @map("created_at")

  @@unique([userId, incidentId])
  @@map("reactions")
}

model ActivityLogModel {
  id         String        @id @default(uuid()) @db.VarChar(36)
  log        String        @db.Text
  incidentId String        @map("incident_id") @db.VarChar(36)
  incident   IncidentModel @relation(fields: [incidentId], references: [id])
  createdAt  DateTime      @default(now()) @map("created_at")

  @@map("activity_logs")
}

enum IncidentStatusEnum {
  PENDING
  ACTIVE
  CLOSED
}

enum ReactionTypeEnum {
  PRAY
  ANGRY
  UOW
}

enum MediaTypeEnum {
  IMAGE
  VIDEO
}

// MODELS OF NOTIFICATION MODULE:

model DeviceModel {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String    @map("user_id") @db.VarChar(36)
  user      UserModel @relation(fields: [userId], references: [id])
  pushToken String    @map("push_token") @db.VarChar(64)

  @@unique([userId, pushToken])
  @@map("devices")
}

model NotificationModel {
  id               String               @id @default(uuid()) @db.VarChar(36)
  targetUserId     String               @map("target_user_id") @db.VarChar(36)
  targetUser       UserModel            @relation(fields: [targetUserId], references: [id])
  code             NotificationCodeEnum
  title            String               @db.Text
  subtitle         String               @db.Text
  body             String               @db.Text
  linkEntity       LinkedEntityEnum     @map("link_entity")
  linkEntityId     String               @map("link_entity_id") @db.VarChar(36)
  seenByTargetUser Boolean
  createdAt        DateTime             @default(now()) @map("created_at")

  @@map("notifications")
}

enum NotificationCodeEnum {
  NEARBY_INCIDENT_CREATED
}

enum LinkedEntityEnum {
  INCIDENT
  USER
}
