"""The query root type"""
type Query {
  """Health check"""
  health: String!

  """
  Based on Relay specs, enable clients to handling caching and data refetching for any GraphQL type that implements the Node Interface
  """
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  incident(
    """The incident id"""
    incidentId: String!
  ): Incident
  incidents(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filter: IncidentsFilterInputType
  ): IncidentConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Incident implements Node {
  """The opaque identifier of GraphQL node, based on relay specs"""
  id: ID!

  """The incident id"""
  incidentId: String!
  title: String!
  coordinate: Coordinate!
  medias: [Media!]!
  createdAt: Date!
}

type Coordinate {
  latitude: Float!
  longitude: Float!
}

type Media {
  url: String!
}

"""Date type serialized into ISO string"""
scalar Date

"""A connection to a list of items."""
type IncidentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IncidentEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type IncidentEdge {
  """The item at the end of the edge"""
  node: Incident!

  """A cursor for use in pagination"""
  cursor: String!
}

input IncidentsFilterInputType {
  withinBoundary: WithinBoundaryInput
}

"""Filter by incidents localizated within a box boundary"""
input WithinBoundaryInput {
  northEast: CoordinateInput!
  southWest: CoordinateInput!
}

input CoordinateInput {
  latitude: Float!
  longitude: Float!
}

"""The mutation root type"""
type Mutation {
  signUp(input: SignUpInput!): SignUpOutput!
  signIn(input: SignInInput!): SignInOutput!
  reportIncident(input: ReportIncidentInput!): ReportIncidentOutput!
}

type SignUpOutput {
  result: SignUpResult!
  clientMutationId: String
}

union SignUpResult = SignUpOkResult | SignUpErrResult

type SignUpOkResult {
  user: User!
}

type User implements Node {
  """The opaque identifier of GraphQL node, based on relay specs"""
  id: ID!

  """The user id"""
  userId: String
  username: String
  phoneNumber: String
}

type SignUpErrResult {
  reason: String!
  code: SignUpErrCodeType!
}

enum SignUpErrCodeType {
  PasswordSizeError
  InvalidPhoneNumberError
}

input SignUpInput {
  username: String!
  password: String!
  phoneNumber: String
  clientMutationId: String
}

type SignInOutput {
  result: SignInResult!
  clientMutationId: String
}

union SignInResult = SignInOkResult | SignInErrResult

type SignInOkResult {
  accessToken: String!
  refreshToken: String!
}

type SignInErrResult {
  reason: String!
  code: SignInErrCodeType!
}

enum SignInErrCodeType {
  UserOrPasswordInvalidError
}

input SignInInput {
  username: String!
  password: String!
  clientMutationId: String
}

type ReportIncidentOutput {
  result: ReportIncidentResult!
  clientMutationId: String
}

union ReportIncidentResult = ReportIncidentOkResult | ReportIncidentErrResult

type ReportIncidentOkResult {
  incident: Incident!
}

type ReportIncidentErrResult {
  reason: String!
  code: ReportIncidentErrCodeType!
}

enum ReportIncidentErrCodeType {
  UnauthenticatedError
  MediaQuantityError
  InvalidCoordinateError
}

input ReportIncidentInput {
  title: String!
  medias: [MediaInput]!
  clientMutationId: String
}

input MediaInput {
  """S3 url"""
  url: String!
}

"""The subscription root type"""
type Subscription {
  userAdded: UserAddedOutput

  """Triggered whenever a new incident is created"""
  incidentCreated: Incident!
}

type UserAddedOutput {
  userEdge: UserEdge
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}
