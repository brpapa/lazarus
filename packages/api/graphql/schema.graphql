"""The query root type"""
type Query {
  """Health check"""
  health: String!

  """
  Based on Relay specs, enable clients to handling caching and data refetching for any GraphQL type that implements the Node Interface
  """
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Informations related to requester user"""
  me: Me
  incident(
    """The incident id"""
    incidentId: String!
  ): Incident
  incidents(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filter: IncidentsFilterInputType
  ): IncidentConnection!
  notification(
    """The notification id"""
    notificationId: String!
  ): Notification
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Me {
  user: User

  """Notifications of requester user ordered by the most recents"""
  notifications(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NotificationConnection!

  """Statistics related to requester user"""
  stats: Stats!
  incidents(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): IncidentConnection
}

type User implements Node {
  """The opaque identifier of GraphQL node, based on relay specs"""
  id: ID!
  userId: String!
  username: String!
  email: String!
  name: String!
  preferences: Preferences!
  location: Location
  avatarUrl: String
}

type Preferences {
  radiusDistance: Float!
  language: LanguageEnum!
}

enum LanguageEnum {
  PT_BR
  EN_US
}

type Location {
  latitude: Float!
  longitude: Float!
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]

  """Total count of notifications of user"""
  totalCount: Int!

  """Count of not seen notifications of user"""
  notSeenCount: Int!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge"""
  node: Notification!

  """A cursor for use in pagination"""
  cursor: String!
}

type Notification implements Node {
  """The opaque identifier of GraphQL node, based on relay specs"""
  id: ID!
  notificationId: String!
  targetUserId: String!
  code: NotificationCodeEnum!
  title: String!
  subtitle: String!
  body: String!
  link: NotificationLink!
  seenByTargetUser: Boolean!
  createdAt: Date!
}

enum NotificationCodeEnum {
  NEARBY_INCIDENT_CREATED
}

type NotificationLink {
  entity: LinkedEntityEnum!
  entityId: String!
}

enum LinkedEntityEnum {
  INCIDENT
  USER
}

"""Date type serialized into ISO string"""
scalar Date

type Stats {
  """Count of incidents nearby to me based on my distanceRadius preference"""
  nearbyIncidentsCount: Int

  """
  Count of users nearby to me (not counting me) based on my distanceRadius preference
  """
  nearbyUsersCount: Int
}

"""A connection to a list of items."""
type IncidentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IncidentEdge]

  """Total count of incidents"""
  totalCount: Int!
}

"""An edge in a connection."""
type IncidentEdge {
  """The item at the end of the edge"""
  node: Incident!

  """A cursor for use in pagination"""
  cursor: String!
}

type Incident implements Node {
  """The opaque identifier of GraphQL node, based on relay specs"""
  id: ID!
  incidentId: String!
  title: String!
  location: Location!
  formattedAddress: String
  medias: [Media!]!
  usersNotifiedCount: Int!
  ownerUser: User!
  createdAt: Date!
}

type Media {
  url: String!
  type: MediaTypeEnum!
}

enum MediaTypeEnum {
  IMAGE
  VIDEO
}

input IncidentsFilterInputType {
  withinBox: IncidentsFilterWithinBox
  withinCircle: IncidentsFilterWithinCircle
}

"""Filter by incidents located within the boundaries of given box"""
input IncidentsFilterWithinBox {
  northEast: LocationInput!
  southWest: LocationInput!
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""Filter by incidents located within the boundaries of given circle"""
input IncidentsFilterWithinCircle {
  center: LocationInput!

  """The circle radius given in meters"""
  radius: Float!
}

"""The mutation root type"""
type Mutation {
  """Register a new user"""
  signUp(input: SignUpInput!): SignUpResult!

  """Login"""
  signIn(input: SignInInput!): SignInResult!

  """Update the current location of the authenticated user"""
  updateUserLocation(input: UpdateUserLocationInput!): UpdateUserLocationResult!

  """Login"""
  refreshToken(input: RefreshTokenInput!): RefreshTokenResult!
  reportIncident(input: ReportIncidentInput!): ReportIncidentResult!
  deleteIncident(input: DeleteIncidentInput!): DeleteIncidentResult!

  """Mark notification as seen by the target user"""
  markNotificationAsSeen(input: MarkNotificationAsSeenInput!): MarkNotificationAsSeenResult!

  """Mark all notifications of requester user as seen"""
  markAllNotificationsAsSeen(input: MarkAllNotificationsAsSeenInput!): MarkAllNotificationsAsSeenResult!
}

union SignUpResult = SignUpOkResult | SignUpErrResult

type SignUpOkResult {
  user: User!
}

type SignUpErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: SignUpErrCodeType!
}

enum SignUpErrCodeType {
  ShortPasswordError
  InvalidEmailAddressError
  UsernameTakenError
  EmailTakenError
}

input SignUpInput {
  username: String!
  name: String!
  email: String!
  password: String!
  _: String
}

union SignInResult = SignInOkResult | SignInErrResult

type SignInOkResult {
  accessToken: String!
  refreshToken: String!

  """The timestamp where the access token is no longer more valid"""
  accessTokenExpiresIn: Date!
}

type SignInErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: SignInErrCodeType!
}

enum SignInErrCodeType {
  UserOrPasswordInvalidError
}

input SignInInput {
  username: String!
  password: String!
  pushToken: String
  _: String
}

union UpdateUserLocationResult = UpdateUserLocationOkResult | UpdateUserLocationErrResult

type UpdateUserLocationOkResult {
  user: User!
}

type UpdateUserLocationErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: UpdateUserLocationErrCodeType!
}

enum UpdateUserLocationErrCodeType {
  UnauthenticatedError
  UserNotFoundError
}

input UpdateUserLocationInput {
  location: LocationInput!
  _: String
}

union RefreshTokenResult = RefreshTokenOkResult | RefreshTokenErrResult

type RefreshTokenOkResult {
  accessToken: String!

  """The timestamp where the access token is no longer more valid"""
  accessTokenExpiresIn: Date!
}

type RefreshTokenErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: RefreshTokenErrCodeType!
}

enum RefreshTokenErrCodeType {
  RefreshTokenExpiredError
  UserNotFoundError
}

input RefreshTokenInput {
  refreshToken: String!
  _: String
}

union ReportIncidentResult = ReportIncidentOkResult | ReportIncidentErrResult

type ReportIncidentOkResult {
  incident: Incident!
}

type ReportIncidentErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: ReportIncidentErrCodeType!
}

enum ReportIncidentErrCodeType {
  UnauthenticatedError
  InvalidMediaQuantityError
}

input ReportIncidentInput {
  title: String!
  medias: [MediaInput]!
  _: String
}

input MediaInput {
  url: String!
  type: MediaTypeEnum!
}

union DeleteIncidentResult = DeleteIncidentOkResult | DeleteIncidentErrResult

type DeleteIncidentOkResult {
  _: String!
}

type DeleteIncidentErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: DeleteIncidentErrCodeType!
}

enum DeleteIncidentErrCodeType {
  UnauthenticatedError
  IncidentNotFound
  UnauthorizedError
}

input DeleteIncidentInput {
  incidentId: String!
  _: String
}

union MarkNotificationAsSeenResult = MarkNotificationAsSeenOkResult | MarkNotificationAsSeenErrResult

type MarkNotificationAsSeenOkResult {
  notification: Notification!
}

type MarkNotificationAsSeenErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: MarkNotificationAsSeenErrCodeType!
}

enum MarkNotificationAsSeenErrCodeType {
  NotificationNotFound
  UnauthorizedError
}

input MarkNotificationAsSeenInput {
  notificationId: String!
  _: String
}

union MarkAllNotificationsAsSeenResult = MarkAllNotificationsAsSeenOkResult | MarkAllNotificationsAsSeenErrResult

type MarkAllNotificationsAsSeenOkResult {
  notifications: [Notification]!
}

type MarkAllNotificationsAsSeenErrResult {
  reason: String!
  reasonIsTranslated: Boolean!
  code: MarkAllNotificationsAsSeenErrCodeType!
}

enum MarkAllNotificationsAsSeenErrCodeType {
  UnauthenticatedError
}

input MarkAllNotificationsAsSeenInput {
  _: String
}

"""The subscription root type"""
type Subscription {
  """Triggered whenever a incident is created nearby to the subscriber user"""
  onNearbyIncidentCreated: Incident!
}
