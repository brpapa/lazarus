"""The root of all queries"""
type Query {
  """
  Based on Relay specs, this field enable clients to handling caching and data refetching of any gql type that implements the Node gql interface
  """
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """The current logged user"""
  me: User
  user(id: ID!): User
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Name of user to search by"""
    search: String
  ): UserConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type User implements Node {
  """The opaque identifier of this node"""
  id: ID!

  """The user id"""
  _id: String
  name: String
  email: String
  active: Boolean
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

"""The root of all mutations"""
type Mutation {
  UserChangePassword(input: UserChangePasswordInput!): UserChangePasswordPayload
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
}

type UserChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}

input UserChangePasswordInput {
  oldPassword: String!

  """user new password"""
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

"""The root of all subscriptions"""
type Subscription {
  UserAdded: UserAddedPayload
}

type UserAddedPayload {
  userEdge: UserEdge
}
